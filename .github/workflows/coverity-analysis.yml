name: Coverity Scan

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      languages:
        description: "Languages to analyze"
        required: true
        default: "c-cpp"

jobs:
  coverity:
    runs-on: ubuntu-24.04
    permissions:
      security-events: write
      packages: read
      actions: read
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - language: c-cpp
            build-mode: manual
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            pkgconf \
            unixodbc-dev \
            libmysqlclient-dev \
            libpq-dev \
            libsqlite3-dev \
            libmongoc-1.0-0 \
            libmongoc-dev \
            libbson-1.0-0 \
            libbson-dev \
            libarchive-dev \
            bzip2

      - name: Download and install Coverity tool
        run: |
          wget https://scan.coverity.com/download/linux64 \
            --post-data "token=${{ secrets.COVERITY_TOKEN }}&project=${{ github.repository }}" \
            -O coverity_tool.tgz
          mkdir coverity_tool
          tar -xvzf coverity_tool.tgz -C coverity_tool --strip-components=1
          echo "$PWD/coverity_tool/bin" >> $GITHUB_PATH

      - name: Build with Coverity (skip Windows-only headers)
        run: |
          mkdir -p cov-int
          for src in *.c; do
            # Skip files that include mbstring.h (Windows-only)
            if grep -q "mbstring.h" "$src"; then
              echo "‚è© Skipping $src due to unsupported header: mbstring.h"
              continue
            fi
            coverity_tool/bin/cov-build --dir cov-int gcc -c "$src" -o "${src%.c}.out" \
              -Wall -Wformat-security \
              $(pkg-config --cflags --libs libmongoc-1.0) \
              -lmysqlclient -lpq -lsqlite3 -lodbc -larchive
          done

      - name: Compress analysis results
        run: tar cjvf myproject.tar.bz2 cov-int
        id: compress

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "coverity-scan-${{ github.run_id }}"
          release_name: "Coverity Scan Results"
          body: "Automated Coverity Scan Results"
          draft: false
          prerelease: false

      - name: Upload analysis archive to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: myproject.tar.bz2
          asset_name: myproject.tar.bz2
          asset_content_type: application/x-bzip2

      - name: Notify Coverity Scan
        run: |
          curl --data "project=${{ github.repository }}&token=${{ secrets.COVERITY_TOKEN }}&email=cpp.benchmark@proton.me&url=https://github.com/${{ github.repository }}/releases/download/coverity-scan-${{ github.run_id }}/myproject.tar.bz2&version=1.0&description=Automated+Coverity+Scan" https://scan.coverity.com/builds
